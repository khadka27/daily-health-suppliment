generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      String
  imageUrl    String?
  publishDate DateTime @default(now())
  slug        String   @unique
  blocks      Block[]
}

model Block {
  id                      String           @id @default(cuid())
  type                    String
  content                 String?
  level                   Int?
  listType                String?
  imageUrl                String?
  language                String?
  ctaText                 String?
  ctaLink                 String?
  productName             String?
  overallRating           Float?
  ingredientsIntroduction String?
  howToUse                String?
  price                   String?
  verdict                 String?
  author                  String?
  reviewDate              String?
  medicallyReviewed       Boolean?
  factChecked             Boolean?
  ctaButtonText           String?
  ctaButtonLink           String?
  backgroundColor         String?
  order                   Int
  articleId               String
  article                 Article          @relation(fields: [articleId], references: [id], onDelete: Cascade)
  cons                    Cons[]
  customFields            CustomField[]
  highlights              Highlight[]
  ingredients             Ingredient[]
  ingredientsList         IngredientItem[]
  pros                    Pros[]
  ratings                 Rating?
}

model Rating {
  id            String @id @default(cuid())
  ingredients   Float?
  value         Float?
  manufacturer  Float?
  safety        Float?
  effectiveness Float?
  blockId       String @unique
  block         Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model Pros {
  id      String @id @default(cuid())
  content String
  order   Int
  blockId String
  block   Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model Cons {
  id      String @id @default(cuid())
  content String
  order   Int
  blockId String
  block   Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model Ingredient {
  id      String @id @default(cuid())
  content String
  order   Int
  blockId String
  block   Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model Highlight {
  id      String @id @default(cuid())
  content String
  order   Int
  blockId String
  block   Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model CustomField {
  id      String @id @default(cuid())
  name    String
  value   String
  blockId String
  block   Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)
}

model IngredientItem {
  id               String  @id @default(cuid())
  number           Int
  name             String
  imageUrl         String
  description      String
  studyYear        String?
  studySource      String?
  studyDescription String?
  blockId          String
  block            Block   @relation(fields: [blockId], references: [id], onDelete: Cascade)
}
