// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file for a Health Supplement Review Blog
// It's been converted from the PostgreSQL schema provided

// Users Model
model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(60)
  email        String    @unique @db.VarChar(100)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  displayName  String    @map("display_name") @db.VarChar(100)
  firstName    String?   @map("first_name") @db.VarChar(50)
  lastName     String?   @map("last_name") @db.VarChar(50)
  avatarUrl    String?   @map("avatar_url") @db.VarChar(255)
  bio          String?
  websiteUrl   String?   @map("website_url") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
  lastLogin    DateTime? @map("last_login") @db.Timestamptz()

  // Relations
  userRoles            UserRole[]
  professionalProfile  ProfessionalProfile?
  articleContributions ArticleContributor[]
  comments             Comment[]
  ratings              UserRating[]
  affiliateClicks      AffiliateClick[]
  visits               Visitor[]

  @@map("users")
}

// Roles Model
model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(50)
  description String?

  // Relations
  userRoles UserRole[]

  @@map("roles")
}

// User-Role Junction
model UserRole {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

// Professional Profiles
model ProfessionalProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique @map("user_id")
  credentials     String?  @db.VarChar(100)
  jobTitle        String?  @map("job_title") @db.VarChar(100)
  company         String?  @db.VarChar(100)
  companyUrl      String?  @map("company_url") @db.VarChar(255)
  phone           String?  @db.VarChar(30)
  showEmail       Boolean  @default(false) @map("show_email")
  showPhone       Boolean  @default(false) @map("show_phone")
  professionalBio String?  @map("professional_bio")
  expertise       String[]

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("professional_profiles")
}

// Contributor Types
model ContributorType {
  id            Int     @id @default(autoincrement())
  name          String  @unique @db.VarChar(50)
  leadingPhrase String? @map("leading_phrase") @db.VarChar(100)

  // Relations
  articleContributors ArticleContributor[]

  @@map("contributor_types")
}

// Categories
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?
  parentId    Int?     @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  // Relations
  parent          Category?         @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull)
  children        Category[]        @relation("CategoryToCategory")
  articles        ArticleCategory[]
  primaryArticles Article[]

  @@map("categories")
}

// Tags
model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  articles ArticleTag[]

  @@map("tags")
}

// Articles (Posts)
// model Article {
//   id                Int       @id @default(autoincrement())
//   title             String    @db.VarChar(255)
//   slug              String    @unique @db.VarChar(255)
//   excerpt           String?
//   content           String
//   featuredImageUrl  String?   @map("featured_image_url") @db.VarChar(255)
//   status            String    @default("draft") @db.VarChar(20)
//   publishDate       DateTime? @map("publish_date") @db.Timestamptz()
//   createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz()
//   updatedAt         DateTime  @default(now()) @map("updated_at") @db.Timestamptz()
//   primaryCategoryId Int?      @map("primary_category_id")
//   wordCount         Int       @default(0) @map("word_count")
//   viewsCount        Int       @default(0) @map("views_count")
//   readingTime       Int       @default(0) @map("reading_time")

//   // Relations
//   primaryCategory     Category?            @relation(fields: [primaryCategoryId], references: [id], onDelete: SetNull)
//   categories          ArticleCategory[]
//   tags                ArticleTag[]
//   contributors        ArticleContributor[]
//   comments            Comment[]
//   seoMetadata         SeoMetadata?
//   productReview       ProductReview?
//   articleImages       ArticleImage[]
//   relatedToArticles   RelatedArticle[]     @relation("ArticleToRelated")
//   relatedFromArticles RelatedArticle[]     @relation("RelatedToArticle")
//   sourceInternalLinks InternalLink[]       @relation("SourceArticle")
//   targetInternalLinks InternalLink[]       @relation("TargetArticle")
//   pageViews           PageView[]
//   affiliateClicks     AffiliateClick[]

//   @@map("articles")
// }

// Article Contributors
model ArticleContributor {
  id                Int     @id @default(autoincrement())
  articleId         Int     @map("article_id")
  userId            Int     @map("user_id")
  contributorTypeId Int     @map("contributor_type_id")
  isPrimary         Boolean @default(false) @map("is_primary")

  // Relations
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributorType ContributorType @relation(fields: [contributorTypeId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId, contributorTypeId])
  @@map("article_contributors")
}

// Article Categories (many-to-many)
model ArticleCategory {
  articleId  Int @map("article_id")
  categoryId Int @map("category_id")

  // Relations
  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_categories")
}

// Article Tags (many-to-many)
model ArticleTag {
  articleId Int @map("article_id")
  tagId     Int @map("tag_id")

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

// SEO Metadata
model SeoMetadata {
  id              Int      @id @default(autoincrement())
  articleId       Int      @unique @map("article_id")
  focusKeyword    String?  @map("focus_keyword") @db.VarChar(255)
  metaTitle       String?  @map("meta_title") @db.VarChar(255)
  metaDescription String?  @map("meta_description")
  canonicalUrl    String?  @map("canonical_url") @db.VarChar(255)
  seoScore        Int?     @map("seo_score") @db.SmallInt
  indexed         Boolean  @default(true)
  updatedAt       DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("seo_metadata")
}

// Article Comments
model Comment {
  id          Int      @id @default(autoincrement())
  articleId   Int      @map("article_id")
  userId      Int?     @map("user_id")
  parentId    Int?     @map("parent_id")
  content     String
  authorName  String?  @map("author_name") @db.VarChar(100)
  authorEmail String?  @map("author_email") @db.VarChar(100)
  authorIp    String?  @map("author_ip") @db.VarChar(45)
  status      String   @default("pending") @db.VarChar(20)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  // Relations
  article Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  parent  Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentToComment")

  @@map("comments")
}

// Product Reviews
model ProductReview {
  id            Int      @id @default(autoincrement())
  articleId     Int      @unique @map("article_id")
  productName   String   @map("product_name") @db.VarChar(255)
  manufacturer  String?  @db.VarChar(255)
  overallRating Decimal  @map("overall_rating") @db.Decimal(3, 1)
  pros          Json?    @db.JsonB
  cons          Json?    @db.JsonB
  price         Decimal? @db.Decimal(10, 2)
  currency      String   @default("USD") @db.VarChar(3)
  verdict       String?
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  // Relations
  article         Article                      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  criteriaRatings ProductCriteriaRating[]
  affiliateLinks  ProductReviewAffiliateLink[]
  userRatings     UserRating[]

  @@map("product_reviews")
}

// Review Criteria
model ReviewCriteria {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?

  // Relations
  productRatings ProductCriteriaRating[]

  @@map("review_criteria")
}

// Criteria Ratings for Products
model ProductCriteriaRating {
  id              Int     @id @default(autoincrement())
  productReviewId Int     @map("product_review_id")
  criteriaId      Int     @map("criteria_id")
  rating          Decimal @db.Decimal(3, 1)
  notes           String?

  // Relations
  productReview ProductReview  @relation(fields: [productReviewId], references: [id], onDelete: Cascade)
  criteria      ReviewCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)

  @@unique([productReviewId, criteriaId])
  @@map("product_criteria_ratings")
}

// Affiliate Links
model AffiliateLink {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  description  String?
  targetUrl    String   @map("target_url")
  slug         String   @unique @db.VarChar(100)
  nofollow     Boolean  @default(true)
  sponsored    Boolean  @default(true)
  active       Boolean  @default(true)
  redirectType String   @default("307") @map("redirect_type") @db.VarChar(10)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz()
  groupId      Int?     @map("group_id")

  // Relations
  group          AffiliateLinkGroup?          @relation(fields: [groupId], references: [id])
  productReviews ProductReviewAffiliateLink[]
  clicks         AffiliateClick[]

  @@map("affiliate_links")
}

// Affiliate Link Groups
model AffiliateLinkGroup {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String?

  // Relations
  affiliateLinks AffiliateLink[]

  @@map("affiliate_link_groups")
}

// Product Review to Affiliate Links (many-to-many)
model ProductReviewAffiliateLink {
  productReviewId Int     @map("product_review_id")
  affiliateLinkId Int     @map("affiliate_link_id")
  isPrimary       Boolean @default(false) @map("is_primary")
  position        Int     @default(0)
  buttonText      String  @default("Buy Now") @map("button_text") @db.VarChar(100)

  // Relations
  productReview ProductReview @relation(fields: [productReviewId], references: [id], onDelete: Cascade)
  affiliateLink AffiliateLink @relation(fields: [affiliateLinkId], references: [id], onDelete: Cascade)

  @@id([productReviewId, affiliateLinkId])
  @@map("product_review_affiliate_links")
}

// Affiliate Link Clicks
model AffiliateClick {
  id              Int      @id @default(autoincrement())
  affiliateLinkId Int      @map("affiliate_link_id")
  articleId       Int?     @map("article_id")
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent")
  referer         String?
  browser         String?  @db.VarChar(100)
  operatingSystem String?  @map("operating_system") @db.VarChar(100)
  deviceType      String?  @map("device_type") @db.VarChar(50)
  countryCode     String?  @map("country_code") @db.VarChar(2)
  city            String?  @db.VarChar(100)
  isRobot         Boolean  @default(false) @map("is_robot")
  sessionId       String?  @map("session_id") @db.VarChar(100)
  userId          Int?     @map("user_id")
  clickedAt       DateTime @default(now()) @map("clicked_at") @db.Timestamptz()

  // Relations
  affiliateLink AffiliateLink @relation(fields: [affiliateLinkId], references: [id], onDelete: Cascade)
  article       Article?      @relation(fields: [articleId], references: [id], onDelete: SetNull)
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("affiliate_clicks")
}

// Website Visitors
model Visitor {
  id              Int      @id @default(autoincrement())
  sessionId       String   @map("session_id") @db.VarChar(100)
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent")
  referer         String?
  browser         String?  @db.VarChar(100)
  operatingSystem String?  @map("operating_system") @db.VarChar(100)
  deviceType      String?  @map("device_type") @db.VarChar(50)
  countryCode     String?  @map("country_code") @db.VarChar(2)
  city            String?  @db.VarChar(100)
  isRobot         Boolean  @default(false) @map("is_robot")
  userId          Int?     @map("user_id")
  firstVisitAt    DateTime @default(now()) @map("first_visit_at") @db.Timestamptz()
  lastVisitAt     DateTime @default(now()) @map("last_visit_at") @db.Timestamptz()
  visitCount      Int      @default(1) @map("visit_count")

  // Relations
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  pageViews PageView[]

  @@map("visitors")
}

// Page Views
model PageView {
  id          Int      @id @default(autoincrement())
  visitorId   Int      @map("visitor_id")
  articleId   Int?     @map("article_id")
  path        String   @db.VarChar(255)
  queryParams Json?    @map("query_params") @db.JsonB
  viewedAt    DateTime @default(now()) @map("viewed_at") @db.Timestamptz()
  timeOnPage  Int?     @map("time_on_page")

  // Relations
  visitor Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("page_views")
}

// Related Articles
model RelatedArticle {
  articleId        Int      @map("article_id")
  relatedArticleId Int      @map("related_article_id")
  score            Decimal? @db.Decimal(5, 2)
  isManual         Boolean  @default(false) @map("is_manual")

  // Relations
  article        Article @relation("ArticleToRelated", fields: [articleId], references: [id], onDelete: Cascade)
  relatedArticle Article @relation("RelatedToArticle", fields: [relatedArticleId], references: [id], onDelete: Cascade)

  @@id([articleId, relatedArticleId])
  @@map("related_articles")
}

// Internal Links
model InternalLink {
  id              Int      @id @default(autoincrement())
  sourceArticleId Int      @map("source_article_id")
  targetArticleId Int?     @map("target_article_id")
  urlPath         String   @map("url_path")
  anchorText      String?  @map("anchor_text")
  context         String?
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  sourceArticle Article  @relation("SourceArticle", fields: [sourceArticleId], references: [id], onDelete: Cascade)
  targetArticle Article? @relation("TargetArticle", fields: [targetArticleId], references: [id], onDelete: SetNull)

  @@map("internal_links")
}

// Amazon Product Data
model AmazonProduct {
  asin          String   @id @db.VarChar(20)
  productName   String   @map("product_name") @db.VarChar(500)
  description   String?
  currentPrice  Decimal? @map("current_price") @db.Decimal(10, 2)
  originalPrice Decimal? @map("original_price") @db.Decimal(10, 2)
  currency      String   @default("USD") @db.VarChar(3)
  productUrl    String?  @map("product_url")
  affiliateUrl  String?  @map("affiliate_url")
  mainImageUrl  String?  @map("main_image_url")
  galleryImages Json?    @map("gallery_images") @db.JsonB
  rating        Decimal? @db.Decimal(3, 1)
  reviewCount   Int      @default(0) @map("review_count")
  features      Json?    @db.JsonB
  isPrime       Boolean  @default(false) @map("is_prime")
  isAvailable   Boolean  @default(true) @map("is_available")
  lastChecked   DateTime @default(now()) @map("last_checked") @db.Timestamptz()

  @@map("amazon_products")
}

// User Ratings for Products
model UserRating {
  id              Int      @id @default(autoincrement())
  productReviewId Int      @map("product_review_id")
  userId          Int?     @map("user_id")
  rating          Decimal  @db.Decimal(3, 1)
  comment         String?
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  productReview ProductReview @relation(fields: [productReviewId], references: [id], onDelete: Cascade)
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("user_ratings")
}

// Newsletter subscribers
model NewsletterSubscriber {
  id                Int      @id @default(autoincrement())
  email             String   @unique @db.VarChar(100)
  firstName         String?  @map("first_name") @db.VarChar(50)
  lastName          String?  @map("last_name") @db.VarChar(50)
  status            String   @default("active") @db.VarChar(20)
  source            String?  @db.VarChar(50)
  ipAddress         String?  @map("ip_address") @db.VarChar(45)
  subscribedAt      DateTime @default(now()) @map("subscribed_at") @db.Timestamptz()
  confirmationToken String   @default(dbgenerated("uuid_generate_v4()")) @map("confirmation_token") @db.Uuid
  isConfirmed       Boolean  @default(false) @map("is_confirmed")

  @@map("newsletter_subscribers")
}

// Article Images
model ArticleImage {
  id        Int     @id @default(autoincrement())
  articleId Int     @map("article_id")
  url       String  @db.VarChar(255)
  altText   String? @map("alt_text") @db.VarChar(255)
  caption   String?
  position  Int     @default(0)

  // Relations
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}
